[project]
name = "automix"
version = "0.1.0"
description = "Auto mixing and video generation for vocal covers"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "ayutaz", email = "your.email@example.com"},
]
keywords = ["audio", "mixing", "video", "vocal", "music"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Multimedia :: Sound/Audio",
    "Topic :: Multimedia :: Video",
]

dependencies = [
    # 音声処理コア
    "numpy>=1.24.0,<2.0.0",
    "scipy>=1.10.0,<2.0.0",
    "librosa>=0.10.0,<1.0.0",
    "soundfile>=0.12.0,<1.0.0",
    "pydub>=0.25.0,<1.0.0",
    
    # エフェクト処理
    "pedalboard>=0.8.0,<1.0.0",
    "pyloudnorm>=0.1.0,<1.0.0",
    
    # 動画生成
    "moviepy>=1.0.3,<2.0.0",
    "opencv-python>=4.8.0,<5.0.0",
    "pillow>=10.0.0,<11.0.0",
    "matplotlib>=3.7.0,<4.0.0",
    
    # ユーティリティ
    "click>=8.1.0,<9.0.0",
    "pyyaml>=6.0,<7.0",
    "tqdm>=4.65.0,<5.0.0",
    "colorama>=0.4.6,<1.0.0",
    "rich>=13.0.0,<14.0.0",
    
    # Web インターフェース
    "flask>=3.0.0,<4.0.0",
    "flask-cors>=4.0.0,<5.0.0",
]

[project.optional-dependencies]
gpu = [
    "cupy>=12.0.0",
]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.0",
    "pytest-mock>=3.11.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "types-pyyaml>=6.0.0",
    "types-tqdm>=4.65.0",
    "safety>=3.0.0",
    "bandit>=1.7.0",
]

[project.scripts]
automix = "automix.cli:main"
automix-web = "automix.web.cli:web"

[project.urls]
Homepage = "https://github.com/ayutaz/auto-mix"
Repository = "https://github.com/ayutaz/auto-mix"
Issues = "https://github.com/ayutaz/auto-mix/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build]
exclude = [
    "/.github",
    "/docs",
    "/tests",
    "/.gitignore",
    "/.gitattributes",
]

[tool.ruff]
target-version = "py311"
line-length = 100

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "T20", # flake8-print
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "PTH", # flake8-use-pathlib
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "T201",  # print found
    "T203",  # pprint found
    "N806",  # Variable in function should be lowercase (for A, S in filters)
    "B006",  # Do not use mutable data structures for argument defaults
    "SIM108", # Use ternary operator (can make code less readable)
    "PTH123", # open() vs Path.open() (both are fine)
    "B904",  # raise from (not always needed)
    "RET504", # Unnecessary assignment before return
    "RET505", # Unnecessary else after return
    "SIM102", # Nested if statements (sometimes clearer)
    "F841",  # Local variable assigned but never used (often in tests)
    "B017",  # pytest.raises(Exception) (sometimes needed in tests)
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["T20", "F841", "B017"]  # Allow print, unused vars, and broad exceptions in tests
"automix/cli.py" = ["T20", "PTH123"]  # Allow print and open() in CLI

[tool.black]
line-length = 100
target-version = ['py311']

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = [
    "librosa",
    "soundfile",
    "pydub",
    "pedalboard",
    "pyloudnorm",
    "moviepy",
    "moviepy.*",
    "cv2",
    "scipy",
    "scipy.*",
    "flask",
    "flask_cors",
    "werkzeug.*",
    "yaml",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--cov=automix",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-fail-under=0",  # TODO: 80に戻す
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["automix"]
omit = [
    "*/tests/*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]